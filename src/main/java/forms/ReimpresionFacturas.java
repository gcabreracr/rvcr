package forms;

import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modelo.VO.AgenciaVO;
import modelo.VO.FacturaVO;
import modelo.FiltrarTablas;
import modelo.HttpClient;
import modelo.VO.ItemFacVO;
import modelo.VO.PdvVO;
import modelo.DAO.AgenciaDAOImpl;
import modelo.DAO.FacturaDAOImpl;
import modelo.DAO.PdvDAOImpl;
import modelo.Validar;
import modelo.Variables;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Usuario
 */
public class ReimpresionFacturas extends javax.swing.JInternalFrame {

    Validar valida = new Validar();
    DefaultTableModel dtmFacturas;
    DecimalFormat formatoDecimal = new DecimalFormat("###,###,##0.00");
    FiltrarTablas filtraTabla;
    int numFactura;
    String mClave_fe, mConsecutivo_fe, mTipoDoc, mTipoFac, mNotas;
    int mPlazoCre;
    double mTotExento, mTotGravado, mSubTotalFac, mDesctoFac, mImptoFac, mTotalFac;
    JSONArray jsonItems;

    public ReimpresionFacturas() {
        initComponents();

        valida.limitarCaracteres(txtCodAge, Variables.L_COD_AGE);
        valida.soloNumeros(txtCodAge);
        valida.soloNumeros(txtCodPdv);
        valida.limitarCaracteres(txtCodPdv, Variables.L_COD_PDV);
        filtraTabla = new FiltrarTablas();

        txtCodAge.setText(String.valueOf(Variables.mAGEUSU));
        lblNomAge.setText(Variables.mNOMAGEUSU);
        txtCodPdv.setText(String.valueOf(Variables.mPDVUSU));
        lblNomPdv.setText(Variables.mNOMPDVUSU);

        Date fecha = new Date();
        jdcFecFactura.setDate(fecha);

        if (Variables.mTIPOUSU < 4) {
            this.txtCodAge.setEnabled(false);
            this.txtCodPdv.requestFocus();
        }
        if (Variables.mTIPOUSU == 1) {
            txtCodPdv.setEnabled(false);
            jdcFecFactura.requestFocus();
        }

        //llenarTabla();
        jtFacturas.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent mouse_evt) {
                if (mouse_evt.getClickCount() == 2) {
                    try {
                        imprimeFactura();
                    } catch (JSONException ex) {
                        Logger.getLogger(ReimpresionFacturas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel13 = new javax.swing.JLabel();
        txtCodAge = new javax.swing.JTextField();
        lblNomAge = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtCodPdv = new javax.swing.JTextField();
        lblNomPdv = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtFacturas = new javax.swing.JTable();
        jdcFecFactura = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        btnConsultar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Reimpresion de facturas");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel13.setText("Agencia");

        txtCodAge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAgeFocusGained(evt);
            }
        });
        txtCodAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodAgeActionPerformed(evt);
            }
        });
        txtCodAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodAgeKeyTyped(evt);
            }
        });

        lblNomAge.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel14.setText("Ruta/ Pdv");

        txtCodPdv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPdvFocusGained(evt);
            }
        });
        txtCodPdv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPdvActionPerformed(evt);
            }
        });

        lblNomPdv.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jtFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cons.Interno", "Numero FE / Nombre", "Monto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtFacturas);
        if (jtFacturas.getColumnModel().getColumnCount() > 0) {
            jtFacturas.getColumnModel().getColumn(0).setResizable(false);
            jtFacturas.getColumnModel().getColumn(0).setPreferredWidth(10);
            jtFacturas.getColumnModel().getColumn(1).setResizable(false);
            jtFacturas.getColumnModel().getColumn(1).setPreferredWidth(300);
            jtFacturas.getColumnModel().getColumn(2).setResizable(false);
            jtFacturas.getColumnModel().getColumn(2).setPreferredWidth(20);
        }

        jLabel1.setText("Fecha");

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel2.setText("Buscar");

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel14)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jdcFecFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(119, 119, 119)
                                .addComponent(btnConsultar))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtCodAge, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblNomAge, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtCodPdv, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblNomPdv, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(txtCodAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblNomAge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSalir)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnConsultar)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel14)
                                        .addComponent(txtCodPdv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblNomPdv, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jdcFecFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodAgeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAgeFocusGained
        // TODO add your handling code here:
        this.txtCodAge.selectAll();
    }//GEN-LAST:event_txtCodAgeFocusGained

    private void txtCodAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodAgeActionPerformed
        // TODO add your handling code here:

        try {
            consultarAgencia();
        } catch (SQLException ex) {
            Logger.getLogger(BuscaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCodAgeActionPerformed

    private void txtCodAgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodAgeKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodAgeKeyTyped

    private void txtCodPdvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPdvFocusGained
        // TODO add your handling code here:
        this.txtCodPdv.selectAll();
    }//GEN-LAST:event_txtCodPdvFocusGained

    private void txtCodPdvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPdvActionPerformed

        if (this.txtCodPdv.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debe digitar un codigo de PDV/Ruta");
            this.txtCodPdv.requestFocus();
            return;
        }
        try {
            consultarPdv();
        } catch (SQLException ex) {
            Logger.getLogger(BuscaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCodPdvActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Variables.frmReimprimeFac = null;
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed

        try {
            llenarTabla();
        } catch (SQLException ex) {
            Logger.getLogger(ReimpresionFacturas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased

        filtraTabla.filtro(txtBuscar.getText(), jtFacturas, 1);
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed

        try {
            imprimeFactura();
        } catch (JSONException ex) {
            Logger.getLogger(ReimpresionFacturas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing

        Variables.frmReimprimeFac = null;
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcFecFactura;
    private javax.swing.JTable jtFacturas;
    private javax.swing.JLabel lblNomAge;
    private javax.swing.JLabel lblNomPdv;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCodAge;
    private javax.swing.JTextField txtCodPdv;
    // End of variables declaration//GEN-END:variables

    private void consultarPdv() throws SQLException {
        PdvVO pdv = new PdvVO();
        pdv.setCodAgencia(Integer.valueOf(txtCodAge.getText()));
        pdv.setCodPdv(Integer.valueOf(txtCodPdv.getText()));

        if (PdvDAOImpl.consultar(pdv)) {

            this.lblNomPdv.setText(pdv.getNomPdv());
            if (txtCodAge.getText().length() > 0) {

            }
            jdcFecFactura.requestFocus();
        } else {
            JOptionPane.showMessageDialog(rootPane, "PDV/Ruta no existe");
            txtCodPdv.requestFocus();
        }

    }

    private void consultarAgencia() throws SQLException {
        AgenciaVO agencia = new AgenciaVO();
        agencia.setCodagencia(Integer.valueOf(txtCodAge.getText()));

        if (AgenciaDAOImpl.consultar(agencia)) {

            this.lblNomAge.setText(agencia.getNomagencia());
            if (txtCodPdv.getText().length() > 0) {

            }

            this.txtCodPdv.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "Agencia no existe");
            txtCodAge.requestFocus();
        }

    }

    private void llenarTabla() throws SQLException {
        dtmFacturas = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int i, int i1) {
                return false;
            }

        };

        dtmFacturas.addColumn("Cons.Interno");
        dtmFacturas.addColumn("Numero FE / Nombre");
        dtmFacturas.addColumn("         Monto");

        // LLenamos el array desde la base de datos
        int age = Integer.valueOf(txtCodAge.getText());
        int pdv = Integer.valueOf(txtCodPdv.getText());
        SimpleDateFormat formatoYMD = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date fecha = jdcFecFactura.getDate();
        String sfecha = formatoYMD.format(fecha);

        ArrayList<FacturaVO> listaFacturas = FacturaDAOImpl.listarFacturas(age, pdv, sfecha);

        Object[] fila = new Object[3];
        for (int i = 0; i < listaFacturas.size(); i++) {
            fila[0] = listaFacturas.get(i).getNum_factura();
            fila[1] = listaFacturas.get(i).getConsecutivo_fe() + " " + listaFacturas.get(i).getNom_factura();
            Double monto = listaFacturas.get(i).getMon_subtotal() + listaFacturas.get(i).getMon_impto() - listaFacturas.get(i).getMon_descto();
            String sMonto = formatoDecimal.format(monto);
            fila[2] = sMonto;
            dtmFacturas.addRow(fila);
        }
        jtFacturas.setModel(dtmFacturas);

        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);

        jScrollPane1.setViewportView(jtFacturas);
        if (jtFacturas.getColumnModel().getColumnCount() > 0) {
            jtFacturas.getColumnModel().getColumn(0).setResizable(false);
            jtFacturas.getColumnModel().getColumn(0).setPreferredWidth(10);
            jtFacturas.getColumnModel().getColumn(1).setResizable(false);
            jtFacturas.getColumnModel().getColumn(1).setPreferredWidth(300);
            jtFacturas.getColumnModel().getColumn(2).setResizable(false);
            jtFacturas.getColumnModel().getColumn(2).setPreferredWidth(25);
            jtFacturas.getColumnModel().getColumn(2).setCellRenderer(dtcr);
        }

        if (listaFacturas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "NO se encontraron registros");
            this.txtCodAge.requestFocus();
        }

    }

    private void seleccionaFactura() throws JSONException {

        if (jtFacturas.getSelectedColumnCount() > 0) {
            int viewRow = jtFacturas.getSelectedRow();
            if (viewRow < 0) {
                numFactura = (int) dtmFacturas.getValueAt(viewRow, 0);
            } else {
                int modelRow = jtFacturas.convertRowIndexToModel(viewRow);
                numFactura = (int) dtmFacturas.getValueAt(modelRow, 0);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una factura");
            jtFacturas.requestFocus();
        }

    }

    private void imprimeFactura() throws JSONException {

        if (jtFacturas.getSelectedColumnCount() <= 0) {

            JOptionPane.showMessageDialog(this, "Seleccione una factura");
            jtFacturas.requestFocus();
            return;
        }

        int viewRow = jtFacturas.getSelectedRow();
        if (viewRow < 0) {
            numFactura = (int) dtmFacturas.getValueAt(viewRow, 0);
        } else {
            int modelRow = jtFacturas.convertRowIndexToModel(viewRow);
            numFactura = (int) dtmFacturas.getValueAt(modelRow, 0);
        }

        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        
        String url = Variables.URL_SERVER + "ejecucionpdv/wsConsultaFactura_v2.php?num_factura=" + numFactura;
        JSONObject respuesta = null;

        try {
            respuesta = HttpClient.httpGET(url);

            mClave_fe = respuesta.optString("clave_fe");
            mConsecutivo_fe = respuesta.optString("consecutivo_fe");
            mTipoDoc = respuesta.optString("tipo_doc");
            mTipoFac = respuesta.optString("tipo_fac");
            mNotas = respuesta.optString("notas");
            mPlazoCre = respuesta.optInt("plazo_fac");
            mTotExento = respuesta.optDouble("mon_exento");
            mTotGravado = respuesta.optDouble("mon_gravado");
            mSubTotalFac = respuesta.optDouble("mon_subtotal");
            mDesctoFac = respuesta.optDouble("mon_descto");
            mImptoFac = respuesta.optDouble("mon_impto");
            jsonItems = respuesta.optJSONArray("items");

        } catch (IOException ex) {
            Logger.getLogger(EmiteFactura.class.getName()).log(Level.SEVERE, null, ex);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
        mTotalFac = mSubTotalFac - mDesctoFac + mImptoFac;

        Map parametros = new HashMap();
        if (mTipoDoc.equals("01")) {
            parametros.put("nom_documento", "FACTURA ELECTRONICA");
        } else {
            parametros.put("nom_documento", "TIQUETE ELECTRONICO");
        }

        parametros.put("consecutivo_fe", mConsecutivo_fe);
        parametros.put("fecha_factura", jdcFecFactura.getDate());
        parametros.put("nombre_cliente", respuesta.optString("nom_factura"));
        parametros.put("id_cliente", respuesta.optString("id_factura"));
        if (mTipoFac.equals("01")) {
            parametros.put("tipo_factura", "CONTADO");
        } else {
            parametros.put("tipo_factura", "CREDITO");
        }
        parametros.put("plazo", String.valueOf(mPlazoCre));
        parametros.put("nom_vendedor", Variables.mNOMUSU);
        parametros.put("tot_exento", formatoDecimal.format(mTotExento));
        parametros.put("tot_gravado", formatoDecimal.format(mTotGravado));
        parametros.put("subtotal_fac", formatoDecimal.format(mSubTotalFac));
        parametros.put("descto_fac", formatoDecimal.format(mDesctoFac));
        parametros.put("impto_fac", formatoDecimal.format(mImptoFac));
        parametros.put("monto_fac", formatoDecimal.format(mTotalFac));
        parametros.put("notas", mNotas);
        parametros.put("clave_numerica", mClave_fe);

        ArrayList<ItemFacVO> listaItemFacVo = new ArrayList();

        JSONObject jsonObjectItem;
        ItemFacVO item;
        try {
            for (int i = 0; i < jsonItems.length(); i++) {
                item = new ItemFacVO();
                jsonObjectItem = jsonItems.optJSONObject(i);
                item.setCod_articulo(jsonObjectItem.optInt("codigo_art"));
                item.setNom_articulo(jsonObjectItem.optString("nom_cor_art"));
                item.setCantidad(jsonObjectItem.optInt("cantidad"));
                item.setPrecio(jsonObjectItem.optDouble("precio"));
                item.setPor_descto(jsonObjectItem.optInt("por_descto"));
                item.setMon_descto(jsonObjectItem.optDouble("mon_descto"));
                item.setPor_impto(jsonObjectItem.optInt("por_impto"));
                item.setMon_impto(jsonObjectItem.optInt("mon_impto"));
                item.setMon_subtotal(jsonObjectItem.optDouble("mon_subtotal"));
                item.setExento(jsonObjectItem.optInt("exento"));
                listaItemFacVo.add(item);
            }
        } catch (Exception e) {
            Logger.getLogger(ReimpresionFacturas.class.getName()).log(Level.SEVERE, null, e);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }

        JasperReport factura;

        try {
            factura = (JasperReport) JRLoader.loadObject(getClass().getResource("/reportes/factura.jasper"));

            JasperPrint jp = JasperFillManager.fillReport(factura, parametros, new JRBeanCollectionDataSource(listaItemFacVo));
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            jv.setTitle("EMISION DE FACTURAS");
            jv.setVisible(true);

        } catch (JRException ex) {

            //JOptionPane.showMessageDialog(this, "Error en la generacion del reporte\n"+ex.getMessage());
            Logger.getLogger(ReimpresionFacturas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
